[{"id":"4e5f7368.eb7554","type":"tab","label":"Configuration & validation","disabled":false,"info":""},{"id":"a497bd66.00597","type":"tab","label":"Realtime aggregation","disabled":false,"info":""},{"id":"ebc75712.e41c3","type":"tab","label":"Historical data aggregation","disabled":false,"info":""},{"id":"58724aad.094cbc","type":"subflow","name":"Format_events","info":"","category":"","in":[{"x":60,"y":200,"wires":[{"id":"4ab8c62.fc877b8"},{"id":"2d7fc8b8.54a0e8"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"cbced77a.258f","port":0}]}],"env":[],"color":"#DDAA99"},{"id":"4f84ba09.c18684","type":"subflow","name":"Historical_data_format_events","info":"","category":"","in":[{"x":80,"y":200,"wires":[{"id":"390cc910.d4e64e"},{"id":"d9553c9f.88e68"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"4a7d1d2d.b43b1c","port":0}]}],"env":[],"color":"#DDAA99"},{"id":"73c92533.bf8c4c","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"11009862.6b15b8","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#7c317b","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","reset":false},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":true},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":true},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":true},"group-backgroundColor":{"value":"#ffffff","edited":true},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":true},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"61f0afa7.69065","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"2c2ef64e.dcc19a","type":"postgresdb","z":"","hostname":"c7b19f2d-0102-4137-b336-6ba95b59d856.bkvfu0nd0m8k95k94ujg.databases.appdomain.cloud","port":"32153","db":"ibmclouddb","ssl":true},{"id":"a315b9fe.f7dcd8","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"d9c99456.f5f2c8","type":"ui_tab","z":"","name":"Sensor Support","icon":"dashboard","disabled":false,"hidden":false},{"id":"361f4878.077508","type":"ui_tab","z":"","name":"SimData","icon":"dashboard","disabled":false,"hidden":false},{"id":"1e0d35dc.4f5a4a","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"b3c0147d.adc658","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"cbd77404.d1df98","type":"postgresdb","z":"","hostname":"c7b19f2d-0102-4137-b336-6ba95b59d856.bkvfu0nd0m8k95k94ujg.databases.appdomain.cloud","port":"32153","db":"ibmclouddb","ssl":true},{"id":"a90c7bbb.a75358","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"2a2801bc.b6ed6e","type":"ui_tab","z":"","name":"Sensor Support","icon":"dashboard","disabled":false,"hidden":false},{"id":"f87bf8f6.c70ad8","type":"ui_group","z":"","name":"Sensor Support","tab":"2a2801bc.b6ed6e","disp":true,"width":"11","collapse":false},{"id":"7d058c9f.5f3524","type":"ui_tab","z":"","name":"SimData","icon":"dashboard","disabled":false,"hidden":false},{"id":"4de1d761.0eb5a8","type":"wiotp","z":"","name":"WIoTP-KEY"},{"id":"af5b222.f708ee","type":"ibmiot","z":"","name":"WIoTP-KEY","keepalive":"60","serverName":"","cleansession":true,"appId":"reso","shared":false},{"id":"12c2f6ac.9a9dc9","type":"postgresdb","z":"","hostname":"c7b19f2d-0102-4137-b336-6ba95b59d856.bkvfu0nd0m8k95k94ujg.databases.appdomain.cloud","port":"32153","db":"ibmclouddb","ssl":true},{"id":"62397777.9756b8","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"5b25f709.b376a8","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"4fd95553.7f082c","type":"postgresdb","z":"","hostname":"c7b19f2d-0102-4137-b336-6ba95b59d856.bkvfu0nd0m8k95k94ujg.databases.appdomain.cloud","port":"32153","db":"ibmclouddb","ssl":true},{"id":"df4c7197.8266d","type":"ui_tab","z":"","name":"newFieldNames","icon":"dashboard","disabled":false,"hidden":false},{"id":"7d2be5db.ffe6dc","type":"ui_tab","z":"","name":"Sensor Support","icon":"dashboard","disabled":false,"hidden":false},{"id":"384d3135.1d9b6e","type":"ui_group","z":"","name":"Sensor Support","tab":"7d2be5db.ffe6dc","disp":true,"width":"11","collapse":false},{"id":"acbb39d4.0ee3c8","type":"ui_tab","z":"","name":"SimData","icon":"dashboard","disabled":false,"hidden":false},{"id":"448c73a1.afd5ac","type":"wiotp","z":"","name":"WIoTP-KEY"},{"id":"9bcd50e8.590fe","type":"ibmiot","z":"","name":"WIoTP-KEY","keepalive":"60","serverName":"","cleansession":true,"appId":"sensor","shared":false},{"id":"5facc902.7b5eb8","type":"postgresdb","z":"","hostname":"c7b19f2d-0102-4137-b336-6ba95b59d856.bkvfu0nd0m8k95k94ujg.databases.appdomain.cloud","port":"32153","db":"ibmclouddb","ssl":true},{"id":"7580b7e2.0d6ff8","type":"ui_group","z":"","name":"Default","tab":"4f7e21cc.27c718","disp":true,"width":"6","collapse":false},{"id":"4f7e21cc.27c718","type":"ui_tab","z":"","name":"Home","icon":"dashboard"},{"id":"b948dbcb.0b792","type":"postgresdb","z":"","hostname":"","port":"","db":"","ssl":true},{"id":"f780172b.bbd9f8","type":"function","z":"4e5f7368.eb7554","name":"filter floors","func":"credentials = global.get(\"tbi_credentials\")\npayload = msg.payload\ndeviceType = \"dnaspaces_\" + msg.org\nfloors = []\nfor(i=0;i<payload[0].length;i++){\n    floors[i] = payload[0][i].floor\n}\nmsg.floors = floors\nmsg.payload = {}\nmsg.payload.deviceType = credentials.deviceType\nreturn msg;","outputs":1,"noerr":0,"x":910,"y":213,"wires":[["b00f7dda.b53a38"]],"info":"The payload from the API contains both floorId and buildingId, So filtering the payload to store the only floorID"},{"id":"bc4b6b4b.c52ae","type":"function","z":"4e5f7368.eb7554","name":"Form login request","func":"credentials = global.get(\"tbi_credentials\")\nvar tbiUsername = credentials.username\nvar tbiPassword = credentials.password\nvar tbiUrl = credentials.url\nvar graphId = credentials.url.split(\"//\")[1].split(\"-\")[0]\nmsg.headers = {};\nmsg.headers[\"Content-type\"] = \"application/json\";\nmsg.payload = \"{\" + '\"username\":\"' + tbiUsername + '\",\"password\":\"' + tbiPassword + '\"}'; \nmsg.url = tbiUrl + \"/api/v1/user/activity/login\";\nreturn msg;","outputs":1,"noerr":0,"x":190,"y":213,"wires":[["98cc4e38.4c518"]],"info":"This node node communicates with TBI Kitt application using the given user credentials."},{"id":"98cc4e38.4c518","type":"http request","z":"4e5f7368.eb7554","name":"Login to TBI","method":"POST","ret":"obj","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"basic","x":382,"y":213,"wires":[["e803038c.053878"]]},{"id":"e803038c.053878","type":"function","z":"4e5f7368.eb7554","name":"Form floor request","func":"credentials = global.get(\"tbi_credentials\")\nmsg.headers = {};\nmsg.headers[\"Content-type\"] = \"application/json\";\nmsg.headers[\"Authorization\"] = msg.payload.token;\ngraphid = credentials.url.split(\"//\")[1].split(\"-\")[0]\nmsg.url = credentials.url.replace(\"-AGG\",\"-KITT\") + \"/api/v1/graph/\"+graphid+\"/reasoning/search/ListBuildingFloorRQ\"\nmsg.org = credentials.url.split(\"//\")[1].split(\"-\")[0]\nreturn msg;","outputs":1,"noerr":0,"x":570,"y":213,"wires":[["33ff8e03.4a28fa"]],"info":"Getting FloorId's from TBI KITT"},{"id":"33ff8e03.4a28fa","type":"http request","z":"4e5f7368.eb7554","name":"Get floors","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"basic","x":750,"y":213,"wires":[["f780172b.bbd9f8"]]},{"id":"4ab8c62.fc877b8","type":"array-loop","z":"58724aad.094cbc","name":"Send Events","key":"al58559577f35edc","keyType":"msg","reset":false,"resetValue":"value-null","array":"finalEvents","arrayType":"msg","x":230,"y":200,"wires":[[],["cbced77a.258f"]]},{"id":"d4b2c32d.b01188","type":"ibmiot out","z":"a497bd66.00597","authentication":"apiKey","apiKey":"9bcd50e8.590fe","outputType":"evt","deviceId":"","deviceType":"","eventCommandType":"stat","format":"json","data":"{}","qos":"2","name":"Publish to WIoTP","service":"registered","x":978,"y":185,"wires":[]},{"id":"53e09dc.c1b3ce4","type":"function","z":"a497bd66.00597","name":"PostgreSQL Query","func":"global.set(\"realtime_flow_status\", \"running\")\ncredentials = global.get(\"tbi_credentials\")\n/*\n * Query to get the latest events from the raw sensor table in the last 24 hours\n */\nmsg.payload = [{\n        query : \"SELECT * FROM (SELECT event, deviceid, tririgaorgid, tririgafloorid, timestamp, row_number() OVER (PARTITION BY deviceid ORDER BY timestamp DESC) AS rn  FROM public.iot_\"+ credentials.deviceType + \" where tririgafloorid IS NOT NULL and tririgaorgid IS NOT NULL and (event = 1 or event = 2) and timestamp >= (NOW() - '1 day'::interval)) t2 WHERE rn = 1\",\n        output: true,\n    }]\nmsg.delay = credentials.aggregationInterval*1000*60\nreturn msg;","outputs":1,"noerr":0,"x":204,"y":109,"wires":[["991c5d72.04e398","7a5b5d4b.94e81c"]]},{"id":"991c5d72.04e398","type":"postgres","z":"a497bd66.00597","postgresdb":"","name":"Read Data","output":true,"outputs":1,"x":639,"y":109,"wires":[["a62bbd34.155fd"]]},{"id":"a62bbd34.155fd","type":"function","z":"a497bd66.00597","name":"Compute occupancy","func":"var floorOrgs = []\nvar finalEvents = []\nvar payload = msg.payload\nvar occdata = {}\nvar floors = []\nvar occupancy = 0\nfor(i=0;i<payload.length;i++){\n    floorId = payload[i]['tririgafloorid']\n    orgId = payload[i]['tririgaorgid']\n    orgKey = floorId+\":\"+orgId\n    if(!floors.includes(floorId)){\n        floors.push(floorId)\n        occdata[floorId] = 0\n    }\n    if(!floorOrgs.includes(orgKey)){\n        floorOrgs.push(orgKey)\n        occdata[orgKey] = 0\n    }\n    occupancy = 0\n    if(payload[i][\"event\"] == 2){\n        occupancy = 1\n    }\n    occdata[floorId] = occdata[floorId] + occupancy\n    occdata[orgKey] = occdata[orgKey] + occupancy\n}\nglobal.set(\"occdata\",occdata)\n//Converting to required format\nfor(i=0;i<floorOrgs.length;i++){\n    floorOrg = floorOrgs[i]\n    //format here is floorId:OrgId:OrgOccCount:OccupancyCount\n    evt = floorOrg+\":\"+occdata[floorOrg]+\":\"+occdata[floorOrg.split(\":\")[0]]\n    finalEvents.push(evt)\n}\nmsg.finalEvents = finalEvents\nreturn msg;","outputs":1,"noerr":0,"x":846,"y":109,"wires":[["feac595f.878b88"]]},{"id":"cbced77a.258f","type":"function","z":"58724aad.094cbc","name":"Send Event To WIoTP","func":"credentials = global.get(\"tbi_credentials\")\norg = credentials.url.split(\"//\")[1].split(\"-\")[0]\nmsg.deviceType = \"dnaspaces_\"+org\npayload = msg.payload\npayload = payload.split(\":\")\ndata = {}\nmsg.deviceId = payload[0]\ndata.orgid = payload[1]\ndata.orgoccupancycount = payload[2]\ndata.occupancycount = payload[3]\nvar date = new Date();\ndata.time = date.toISOString();\nmsg.payload = data\nreturn msg;","outputs":1,"noerr":0,"x":220,"y":80,"wires":[["4ab8c62.fc877b8"]]},{"id":"7a5b5d4b.94e81c","type":"delay","z":"a497bd66.00597","name":"Trigger next batch","pauseType":"delayv","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":424,"y":109,"wires":[["17041f29.6cb971"]]},{"id":"e2902257.c28e88","type":"link in","z":"a497bd66.00597","name":"","links":["5f311faf.8e3ef"],"x":35,"y":108,"wires":[["53e09dc.c1b3ce4","1ef6e1c5.7b4af6"]]},{"id":"ce63a2fe.26fc48","type":"comment","z":"58724aad.094cbc","name":"Remove the hardcoding orgid","info":"","x":740,"y":160,"wires":[]},{"id":"feac595f.878b88","type":"subflow:58724aad.094cbc","z":"a497bd66.00597","name":"Format events","env":[],"x":750,"y":185,"wires":[["d4b2c32d.b01188"]],"info":"This subflow send events to WIoTP"},{"id":"b00f7dda.b53a38","type":"device-manager","z":"4e5f7368.eb7554","auth":"api","name":"Get devices from WIoTP","apiKey":"448c73a1.afd5ac","deviceType":"","method":"GetAll","deviceId":"","password":"","ignore":false,"x":210,"y":303,"wires":[["6219bf6d.a45378"]]},{"id":"6219bf6d.a45378","type":"function","z":"4e5f7368.eb7554","name":"Validate metadata","func":"credentials = global.get(\"tbi_credentials\")\nsensors = msg.payload.results\nerror_sensors = {}\nmsg.payload.success = true\nkittFloors = msg.floors\nfor(i=0;i<sensors.length;i++){\n    tririgaFloor = \"\"\n    tririgaOrg = \"\"\n    tririgaFloor = sensors[i].metadata.tririgaFloorId\n    tririgaOrg = sensors[i].metadata.tririgaOrgId\n    if(tririgaFloor === \"\" || tririgaOrg === \"\"){\n        error_sensors[sensors[i]['deviceId']] = \"Floor Id or Org Id not there in metadata\"\n        if(credentials.stopOnValidationFailure === true) {\n            msg.payload.success = false\n        }\n    }\n    if(!(kittFloors.includes(tririgaFloor))){\n        error_sensors[sensors[i]['deviceId']] = \"Floor Id not in TBI floors\"\n        if(credentials.stopOnValidationFailure === true) {\n            msg.payload.success = false\n        }\n    }\n}\nglobal.set(\"sensor_validation_errors\",error_sensors)\nreturn msg;","outputs":1,"noerr":0,"x":439,"y":303,"wires":[["28a97180.e8af86"]]},{"id":"84bc2318.356fe8","type":"function","z":"ebc75712.e41c3","name":"Form SQL query","func":"global.set(\"hist_flow_status\", \"running\")\ncredentials = global.get(\"tbi_credentials\")\n// Check if this is the first time that we need to get the time from PostgreSQL\nget_start_time = global.get(\"hist_get_start_time\")\nif(get_start_time === undefined){\n    msg.payload = [{\n        query : \"select timestamp from public.iot_\"+ credentials.deviceType + \" order by timestamp asc limit 1\",\n        output: true,\n    }]\n     msg.switch = 0\n} else {\n    /**\n     * For the subsequent time form a PostgreSQL query\n     * that will take data for the subsequent aggregation interval\n     * (say 15 minutes)\n     **/\n    start_time = new Date(global.get(\"hist_start_time\"))\n    end_time = new Date(global.get(\"hist_start_time\"))\n    end_time.setMinutes(new Date(end_time).getMinutes() + credentials.aggregationInterval)\n    start_time = start_time.toISOString()\n    end_time = end_time.toISOString()\n\n    \n    msg.payload = [{\n            query : \"SELECT * FROM (SELECT event, deviceid, tririgaorgid, tririgafloorid, timestamp, row_number() OVER (PARTITION BY deviceid ORDER BY timestamp DESC) AS rn  FROM (select * from public.iot_\"+ credentials.deviceType + \" where timestamp > '\"+start_time+\"' and timestamp <= '\"+end_time+\"') as tmp where event = 1 or event = 2) t2 WHERE rn = 1\",\n            output: true,\n        }]\n    msg.start_time = end_time\n    var date = new Date();\n    current_time = date.toISOString();\n    if(end_time > current_time){\n        msg.switch = 1\n    }\n    else{\n        msg.switch = 0\n    }\n    msg.end_time = end_time\n    global.set(\"hist_start_time\",end_time)\n}\nreturn msg;","outputs":1,"noerr":0,"x":160,"y":220,"wires":[["d8d76fb.986c61"]]},{"id":"dd2af4bd.cf148","type":"inject","z":"ebc75712.e41c3","name":"Trigger","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":90,"y":100,"wires":[["2be30c75.fff6a4"]]},{"id":"c397ce31.72e7a8","type":"postgres","z":"ebc75712.e41c3","postgresdb":"5facc902.7b5eb8","name":"Read data","output":true,"outputs":1,"x":570,"y":220,"wires":[["1eb2fb3.87dab05"]]},{"id":"1eb2fb3.87dab05","type":"function","z":"ebc75712.e41c3","name":"Compute occupancy","func":"function roundTimeQuarterHour(time) {\n    var credentials = global.get(\"tbi_credentials\")\n    var timeToReturn = new Date(time);\n    var interval = credentials.aggregationInterval\n    timeToReturn.setMilliseconds(Math.round(timeToReturn.getMilliseconds() / 1000) * 1000);\n    timeToReturn.setSeconds(Math.round(timeToReturn.getSeconds() / 60) * 60);\n    timeToReturn.setMinutes(Math.floor(timeToReturn.getMinutes() / interval) * interval);\n    return timeToReturn;\n}\nif(global.get(\"hist_get_start_time\") === undefined){\n    start_time = msg.payload[0]['timestamp']\n    start_time = roundTimeQuarterHour(start_time)\n    global.set(\"hist_start_time\",start_time)\n    msg.start_time = start_time\n    global.set(\"hist_floorOrgs\",[])\n    global.set(\"hist_occdata\",{})\n    global.set(\"hist_floors\",[])\n    global.set(\"hist_get_start_time\",0)\n    global.set(\"hist_sensors_state\",{})\n}\nelse{\n    msg.switch = 1\n    msg.start_time = global.get(\"hist_start_time\")\n    floorOrgs = global.get(\"hist_floorOrgs\")\n    sensors_state = global.get(\"hist_sensors_state\")\n    var finalEvents = []\n    var payload = msg.payload\n    occdata = global.get(\"hist_occdata\")\n    floors = global.get(\"hist_floors\")\n    var occupancy = 0\n    for(i=0;i<payload.length;i++){\n        prev_state = 1\n        if(payload[i]['deviceid'] in sensors_state){\n            prev_state = sensors_state[payload[i]['deviceid']]\n        }\n        curr_state = payload[i][\"event\"]\n        floorId = payload[i]['tririgafloorid']\n        orgId = payload[i]['tririgaorgid']\n        orgKey = floorId+\":\"+orgId\n        if(!floors.includes(floorId)){\n            floors.push(floorId)\n            occdata[floorId] = 0\n        }\n        if(!floorOrgs.includes(orgKey)){\n            floorOrgs.push(orgKey)\n            occdata[orgKey] = 0\n        }\n        if(curr_state == 2 && prev_state == 1){\n            occupancy = 1\n        }\n        else if(curr_state == 1 && prev_state == 2){\n            occupancy = -1\n        }\n        else{\n            occupancy = 0\n        }\n        occdata[floorId] = occdata[floorId] + occupancy\n        occdata[orgKey] = occdata[orgKey] + occupancy\n        sensors_state[payload[i]['deviceid']] = curr_state\n        \n    }\n    global.set(\"hist_occdata\",occdata)\n    //Converting to required format\n    for(i=0;i<floorOrgs.length;i++){\n        floorOrg = floorOrgs[i]\n        //format here is floorId:OrgId:OrgOccCount:OccupancyCount\n        evt = floorOrg+\":\"+occdata[floorOrg]+\":\"+occdata[floorOrg.split(\":\")[0]]\n        finalEvents.push(evt)\n    }\n    msg.finalEvents = finalEvents\n}\nreturn msg;","outputs":1,"noerr":0,"x":760,"y":220,"wires":[["37bcb388.c15dcc","84bc2318.356fe8"]]},{"id":"37bcb388.c15dcc","type":"switch","z":"ebc75712.e41c3","name":"Has data?","property":"switch","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":964.4444427490234,"y":220.5555534362793,"wires":[["d9795fcd.74b4b"],[]]},{"id":"d8d76fb.986c61","type":"switch","z":"ebc75712.e41c3","name":"Time reached?","property":"switch","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"0","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":360,"y":220,"wires":[["17e92479.8872b4"],["c397ce31.72e7a8"]]},{"id":"17e92479.8872b4","type":"change","z":"ebc75712.e41c3","name":"Clear caches","rules":[{"t":"delete","p":"hist_get_start_time","pt":"global"},{"t":"delete","p":"hist_start_time","pt":"global"},{"t":"delete","p":"hist_occdata","pt":"global"},{"t":"delete","p":"hist_floorOrgs","pt":"global"},{"t":"delete","p":"hist_floors","pt":"global"},{"t":"delete","p":"hist_sensors_state","pt":"global"},{"t":"delete","p":"hist_flow_status","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":570,"y":160,"wires":[["49d47510.50aaac"]]},{"id":"8a4ca4eb.e364b","type":"link out","z":"ebc75712.e41c3","name":"","links":["3f4f928e.365736"],"x":1035,"y":340,"wires":[]},{"id":"3f4f928e.365736","type":"link in","z":"a497bd66.00597","name":"","links":["8a4ca4eb.e364b"],"x":781,"y":268,"wires":[["d4b2c32d.b01188"]]},{"id":"3fecc85d.b4eb98","type":"link out","z":"4e5f7368.eb7554","name":"","links":["e2902257.c28e88"],"x":1015,"y":296,"wires":[]},{"id":"390cc910.d4e64e","type":"array-loop","z":"4f84ba09.c18684","name":"Send Events","key":"al58559577f35edc","keyType":"msg","reset":false,"resetValue":"value-null","array":"finalEvents","arrayType":"msg","x":230,"y":200,"wires":[[],["4a7d1d2d.b43b1c"]]},{"id":"4a7d1d2d.b43b1c","type":"function","z":"4f84ba09.c18684","name":"Format events to WIoTP","func":"credentials = global.get(\"tbi_credentials\")\norg = credentials.url.split(\"//\")[1].split(\"-\")[0]\nmsg.deviceType = \"dnaspaces_\"+org\npayload = msg.payload\npayload = payload.split(\":\")\ndata = {}\nmsg.deviceId = payload[0]\ndata.orgid = payload[1]\ndata.orgoccupancycount = payload[2]\ndata.occupancycount = payload[3]\noffset = credentials.offset\n\nvar date = new Date(msg.start_time);\noffset_array = offset.split(\":\")\nif(offset.toString()[0] === '+'){\n    offset = parseInt(offset_array[0])*60 + parseInt(offset_array[1])\n}\nelse{\n    offset = parseInt(offset_array[0])*60 - parseInt(offset_array[1])\n}\ndate.setMinutes(new Date(msg.start_time).getMinutes() - offset)\ndata.time = date.toISOString();\nmsg.payload = data\nreturn msg;","outputs":1,"noerr":0,"x":230,"y":80,"wires":[["390cc910.d4e64e"]]},{"id":"d9795fcd.74b4b","type":"subflow:4f84ba09.c18684","z":"ebc75712.e41c3","name":"Format events","env":[],"x":820,"y":340,"wires":[["8a4ca4eb.e364b"]],"info":"This subflow send events to WIoTP"},{"id":"28a97180.e8af86","type":"switch","z":"4e5f7368.eb7554","name":"validation success?","property":"payload.success","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":645,"y":303,"wires":[["dc61e579.8e604"],["a839aaaa.97a8d"]]},{"id":"7a266f75.6a5818","type":"comment","z":"4e5f7368.eb7554","name":"Validate meta data & start realtime flow","info":"Validates the following,\n * Whether all devices are having meta data in the right format\n * Whether the floordId and OrgId in meta data matches the floorId and orgId in TBI","x":170,"y":60,"wires":[]},{"id":"90680216.c659b","type":"function","z":"4e5f7368.eb7554","name":"Configure TBI credentials","func":"credentials = {\n    \"username\":\"\",\n    \"password\":\"\",\n    \"url\":\"\",\n    \"deviceType\":\"\",   // Sensor device type from WIoTP\n    \"aggregationInterval\":15,  // Interval in minutes\n    \"stopOnValidationfailure\": true,\n    \"offset\": \"+00:00\"  // building timeoffset required if sensor data is not written in UTC\n}\n\nglobal.set(\"tbi_credentials\",credentials)\nmsg.payload = credentials\nreturn msg;","outputs":1,"noerr":0,"x":290,"y":120,"wires":[["29a3649d.fd6a4c"]],"info":"This node node communicates with TBI Kitt application using the given user credentials."},{"id":"3c535788.692b68","type":"inject","z":"4e5f7368.eb7554","name":"Start","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":"1","x":90,"y":120,"wires":[["90680216.c659b"]]},{"id":"aab5c89b.046f78","type":"debug","z":"4e5f7368.eb7554","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":910,"y":400,"wires":[]},{"id":"29a3649d.fd6a4c","type":"switch","z":"4e5f7368.eb7554","name":"Credentials set?","property":"payload.username","propertyType":"msg","rules":[{"t":"empty"},{"t":"nempty"}],"checkall":"true","repair":false,"outputs":2,"x":520,"y":120,"wires":[["f66c577.31f0da8"],["bc4b6b4b.c52ae"]]},{"id":"f66c577.31f0da8","type":"function","z":"4e5f7368.eb7554","name":"Error message","func":"msg.payload = \"TBI credentials are not set!\"\nreturn msg;","outputs":1,"noerr":0,"x":760,"y":114,"wires":[["3631031e.768a3c"]],"info":"This node node communicates with TBI Kitt application using the given user credentials."},{"id":"3631031e.768a3c","type":"debug","z":"4e5f7368.eb7554","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":950,"y":114,"wires":[]},{"id":"dc61e579.8e604","type":"switch","z":"4e5f7368.eb7554","name":"start realtime flow","property":"realtime_flow_status","propertyType":"global","rules":[{"t":"neq","v":"running","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":860,"y":296,"wires":[["3fecc85d.b4eb98"]]},{"id":"17041f29.6cb971","type":"switch","z":"a497bd66.00597","name":"proceed or stop?","property":"realtime_flow_status","propertyType":"global","rules":[{"t":"eq","v":"running","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":280,"y":182,"wires":[["53e09dc.c1b3ce4"],["7ba4864b.ca9f08"]]},{"id":"f450012d.476d","type":"inject","z":"4e5f7368.eb7554","name":"Stop realtime flow","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":130,"y":500,"wires":[["14be2eb2.409a21"]]},{"id":"30d64631.3b31ca","type":"comment","z":"4e5f7368.eb7554","name":"Click to stop the realtime flow","info":"","x":140,"y":460,"wires":[]},{"id":"967b6a48.1af7f","type":"debug","z":"a497bd66.00597","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":623,"y":269,"wires":[]},{"id":"7ba4864b.ca9f08","type":"function","z":"a497bd66.00597","name":"Set stop message","func":"msg.payload = \"Realtime aggregation flow stopped.\"\nreturn msg;","outputs":1,"noerr":0,"x":500,"y":187,"wires":[["967b6a48.1af7f"]]},{"id":"a839aaaa.97a8d","type":"function","z":"4e5f7368.eb7554","name":"Failure msg","func":"error_sensors = global.get(\"sensor_validation_errors\")\nmsg.payload = error_sensors","outputs":1,"noerr":0,"x":710,"y":400,"wires":[["aab5c89b.046f78"]]},{"id":"14be2eb2.409a21","type":"change","z":"4e5f7368.eb7554","name":"Clear caches","rules":[{"t":"delete","p":"get_start_time","pt":"global"},{"t":"delete","p":"start_time","pt":"global"},{"t":"delete","p":"offset","pt":"global"},{"t":"delete","p":"tbi_credentials","pt":"global"},{"t":"delete","p":"occdata","pt":"global"},{"t":"delete","p":"realtime_flow_status","pt":"global"},{"t":"delete","p":"AggInt","pt":"global"},{"t":"delete","p":"sensors_state","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":500,"wires":[[]]},{"id":"c3d14b55.9be76","type":"inject","z":"a497bd66.00597","name":"Auto clear global variables","topic":"","payload":"Clear global caches at start","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"0.0","x":160,"y":480,"wires":[["ccfab6ef.0724e","75a66baa.0ac6c4"]]},{"id":"ccfab6ef.0724e","type":"change","z":"a497bd66.00597","name":"Clear caches","rules":[{"t":"delete","p":"hist_get_start_time","pt":"global"},{"t":"delete","p":"hist_start_time","pt":"global"},{"t":"delete","p":"tbi_credentials","pt":"global"},{"t":"delete","p":"occdata","pt":"global"},{"t":"delete","p":"realtime_flow_status","pt":"global"},{"t":"delete","p":"hist_sensors_state","pt":"global"},{"t":"delete","p":"hist_occdata","pt":"global"},{"t":"delete","p":"hist_floorOrgs","pt":"global"},{"t":"delete","p":"hist_floors","pt":"global"},{"t":"delete","p":"sensor_validation_errors","pt":"global"},{"t":"delete","p":"hist_flow_status","pt":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":410,"y":480,"wires":[[]]},{"id":"75a66baa.0ac6c4","type":"debug","z":"a497bd66.00597","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":410,"y":540,"wires":[]},{"id":"1ef6e1c5.7b4af6","type":"function","z":"a497bd66.00597","name":"Form debug message","func":"msg.payload = \"Starting realtime aggregation flow..\"\nreturn msg;","outputs":1,"noerr":0,"x":214,"y":269,"wires":[["967b6a48.1af7f"]]},{"id":"968fc306.a0adc8","type":"comment","z":"a497bd66.00597","name":"Clear caches during startup","info":"","x":140,"y":434,"wires":[]},{"id":"58a6c9aa.690d2","type":"debug","z":"58724aad.094cbc","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":450,"y":280,"wires":[]},{"id":"2d7fc8b8.54a0e8","type":"function","z":"58724aad.094cbc","name":"Form debug msg","func":"msg.payload = \"Realtime: Sending \" + msg.finalEvents.length + \" events to WIoTP\"\nreturn msg;","outputs":1,"noerr":0,"x":230,"y":280,"wires":[["58a6c9aa.690d2"]]},{"id":"6bef455f.24111c","type":"comment","z":"a497bd66.00597","name":"Realtime data aggregation flow","info":"","x":151,"y":60,"wires":[]},{"id":"d9553c9f.88e68","type":"function","z":"4f84ba09.c18684","name":"Form debug msg","func":"msg.payload = \"Historical: Sending \" + msg.finalEvents.length + \" events to WIoTP\"\nreturn msg;","outputs":1,"noerr":0,"x":249,"y":280,"wires":[["fb99dcf0.8dc7e"]]},{"id":"fb99dcf0.8dc7e","type":"debug","z":"4f84ba09.c18684","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":469,"y":280,"wires":[]},{"id":"ce9e0a41.c5bf08","type":"debug","z":"ebc75712.e41c3","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":930,"y":160,"wires":[]},{"id":"49d47510.50aaac","type":"function","z":"ebc75712.e41c3","name":"debug msg","func":"msg.payload = \"Historical flow ended..\"\nreturn msg;","outputs":1,"noerr":0,"x":755,"y":160,"wires":[["ce9e0a41.c5bf08"]]},{"id":"2be30c75.fff6a4","type":"switch","z":"ebc75712.e41c3","name":"Flow running already?","property":"hist_flow_status","propertyType":"global","rules":[{"t":"eq","v":"running","vt":"str"},{"t":"neq","v":"running","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":300,"y":100,"wires":[["ca349920.cfb468"],["84bc2318.356fe8"]]},{"id":"ca349920.cfb468","type":"function","z":"ebc75712.e41c3","name":"Set debug msg","func":"msg.payload = \"Historical flow is already running!\"\nreturn msg;","outputs":1,"noerr":0,"x":540,"y":94,"wires":[["aa5da00f.f99a38"]]},{"id":"aa5da00f.f99a38","type":"debug","z":"ebc75712.e41c3","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":740,"y":94,"wires":[]},{"id":"39f954b2.ddb33c","type":"comment","z":"ebc75712.e41c3","name":"Links to WIoTP node present in Realtime flow","info":"","x":890,"y":400,"wires":[]},{"id":"667fbf13.18814","type":"comment","z":"ebc75712.e41c3","name":"Stops flow if current time is reached","info":"","x":345,"y":272,"wires":[]},{"id":"339e0c8a.abfb94","type":"comment","z":"ebc75712.e41c3","name":"Forms loop for next batch","info":"","x":693,"y":273,"wires":[]}]